#if defined(MIKTEX)
#include <miktex/ExitThrows>
#endif
#if defined(MIKTEX_WINDOWS)
#  define eof eof_hidden
#  include <io.h>
#  undef eof
#endif
#line 1 "lex.yy.cc"

#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */

/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */

/* %endif */

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
extern FILE *yyin, *yyout;
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

/* %endif */

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[337] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  125,  123,   28,   29,   29,   60,  121,   46,
       69,   47,   67,  122,   34,   35,   44,   42,   31,   43,
       40,   45,  105,   32,   33,   54,   51,   56,   50,   69,
      119,   36,  123,   37,   48,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,   38,   68,   39,   69,    4,    3,    3,    4,    4,
       10,    7,    7,    6,   10,   27,   13,   13,   12,   27,
      124,  118,  113,  114,  113,  116,  116,  116,  116,  116,
      116,  118,  118,  116,  118,  116,  116,  117,  118,  116,

      116,   29,   53,   74,   69,   75,   58,   49,   72,   63,
       70,   65,   71,   64,  106,  120,   30,   73,  106,  105,
        0,   62,   55,   52,   57,  119,   29,   76,   61,  119,
      119,  119,  119,  119,  119,  119,   86,  119,  119,  119,
      119,  119,   82,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,   59,
        3,    2,    1,    7,    0,    0,    5,    0,    7,    9,
        8,   13,    0,    0,   11,    0,   13,   14,   22,   22,
       15,   16,   17,   18,   19,   20,   21,    0,  114,  116,
      116,  115,  116,  117,  114,   66,   41,    0,   30,    0,

      106,    0,    0,  106,  119,   77,  119,  119,  119,  119,
      119,  119,  119,  119,   85,  119,  119,  119,   92,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  119,  119,  119,    0,    0,   23,   23,   25,    0,
        0,  106,  119,  119,  119,  119,   81,  119,   83,  119,
      119,   96,  119,  119,  119,  109,  119,  119,  119,  119,
      119,  119,  119,  119,  119,  103,  107,  119,  119,  119,
       24,   26,    0,  106,  119,  119,   88,  119,  119,  110,
      119,  108,  119,  119,  119,  119,  119,  119,   98,  119,
      119,  119,  119,  119,  119,  119,   84,   93,  119,  119,

      119,  119,   94,  119,  119,  119,  119,  100,  119,   87,
       99,   90,  119,  119,  119,   80,  119,  119,  119,   97,
      119,  119,  101,  119,   79,   91,   95,   89,   78,  104,
      111,  112,  119,  119,  102,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   30,   30,   30,   30,   30,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       32,   33,   34,   35,   31,    1,   36,   37,   38,   39,

       40,   41,   31,   42,   43,   31,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   31,   59,   60,   61,   62,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    3,    1,    1,    1,    1,    1,    1,    1,    3,
        3,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[344] =
    {   0,
        0,    0,   60,   62,   64,   69,   74,   79,    0,    0,
      112,    0,  541,  542,  542,  542,  537,  513,  542,  512,
      529,  510,  525,  542,  542,  542,   66,   69,  542,   70,
       83,   72,  157,  511,  542,   83,  507,   62,  542,  503,
        0,  542,   90,  542,  150,  142,  480,  133,  482,   54,
      148,  147,  146,  480,  147,  474,  487,  473,  162,  478,
      482,  542,  463,  542,  542,  542,  542,  519,  502,  506,
      542,  542,  516,  203,  212,  542,  542,  515,  219,  250,
      542,  542,  542,  542,  514,  490,  542,  507,  500,  498,
      495,  493,  487,  185,  483,  156,  479,    0,  223,  472,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  489,  542,  211,  217,  542,    0,  542,  222,  228,
      243,  542,  542,  542,  542,    0,  502,  542,  542,  466,
      464,  457,  461,  453,  448,  460,    0,  445,  447,  450,
      443,  445,    0,  443,  453,  434,  444,  448,  444,  449,
      437,  182,  215,  437,  440,  428,  432,  429,  436,  542,
      542,  542,  542,  542,  271,  306,  542,  276,  475,  542,
      542,  542,  312,  318,  542,  281,  474,  542,  268,  272,
      542,  542,  542,  542,  542,  542,  542,  310,  542,  542,
      542,  542,  459,    0,  472,  542,  278,  313,    0,  326,

      316,  337,  345,  321,  434,    0,  433,  436,  418,  425,
      424,  428,  422,  414,    0,  419,  416,  418,  421,  416,
      409,  404,  413,  404,  403,  401,  401,  399,  400,  399,
      410,  409,  412,  402,  366,  372,  274,  542,  364,  375,
      386,  367,  394,  409,  400,  204,    0,  403,    0,  399,
      401,    0,  389,  385,  387,    0,  401,  400,  392,  393,
      362,  361,  367,  366,  359,    0,    0,  361,  343,  353,
      542,  542,  394,  397,  339,  330,    0,  334,  331,    0,
      335,    0,  318,  325,  327,  308,  302,  312,    0,  306,
      281,  289,  272,  271,  273,  271,    0,    0,  253,  248,

      245,  238,    0,  236,  226,  221,  227,    0,  221,    0,
        0,    0,  194,  187,  179,    0,  179,  165,  155,    0,
      163,  141,    0,  137,    0,    0,    0,    0,    0,    0,
        0,    0,   66,   61,    0,  542,  419,  422,  425,  428,
       68,   66,  431
    } ;

static const flex_int16_t yy_def[344] =
    {   0,
      336,    1,  337,  337,  338,  338,  339,  339,  340,  340,
      336,   11,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      341,  336,  336,  336,  336,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  342,  336,  336,

      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  343,  336,  336,  336,
      336,  336,  336,  336,  336,  341,  336,  336,  336,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  342,  336,  336,  336,  336,  343,  336,

      336,  336,  336,  336,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  336,  336,  336,  336,  336,  336,
      336,  336,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      336,  336,  336,  336,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,

      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,    0,  336,  336,  336,  336,
      336,  336,  336
    } ;

static const flex_int16_t yy_nxt[605] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       33,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   41,   52,   41,   41,   41,   53,   54,   55,   56,
       57,   58,   59,   60,   41,   61,   41,   41,   62,   63,
       64,   65,   67,   68,   67,   68,   72,   73,  194,   74,
      126,   72,   73,   69,   74,   69,   77,   78,   70,  108,
       70,   77,   78,  110,   79,  116,  112,  125,  105,   79,
      117,  109,  102,  127,  111,  113,   75,  118,  138,  335,

      114,   75,  115,  115,  115,  334,   80,  105,  123,  105,
      139,   80,   82,   83,   84,   85,   86,   82,   87,   88,
       87,   87,   82,   82,   82,   89,   90,   82,   91,   92,
       87,   82,   82,   82,   93,   82,   94,   95,   96,   82,
       97,   98,   98,   82,   99,   82,  100,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       82,   87,   82,  101,  119,  128,  120,  120,  120,  130,
      134,  190,  191,  140,  129,  146,  135,  143,  131,  333,
      136,  332,  144,  145,  132,  141,  121,  149,  142,  147,

      150,  154,  331,  155,  165,  165,  166,  330,  167,  191,
      190,  191,  156,  167,  164,  169,  329,  170,  328,  157,
      173,  173,  174,  327,  175,  189,  195,  326,  197,  175,
      198,  198,  198,  225,  226,  168,  115,  115,  115,  200,
      325,  201,  201,  201,  171,  119,  278,  120,  120,  120,
      227,  176,  172,  177,  279,  178,  121,  203,  324,  203,
      178,  202,  204,  204,  204,  228,  323,  121,  322,  179,
      180,  321,  165,  165,  166,  320,  167,  178,  165,  166,
      319,  167,  178,  173,  174,  181,  182,  237,  237,  318,
      183,  238,  238,  271,  271,  200,  184,  198,  198,  198,

      185,  317,  186,  168,  187,  316,  188,  165,  235,  166,
      315,  167,  314,  173,  173,  174,  167,  175,  313,  173,
      236,  174,  175,  175,  312,  239,  311,  310,  175,  239,
      239,  239,  198,  198,  198,  201,  201,  201,  168,  239,
      204,  204,  204,  200,  176,  198,  198,  198,  309,  308,
      176,  241,  121,  241,  307,  240,  242,  242,  242,  203,
      306,  203,  305,  304,  204,  204,  204,  165,  165,  166,
      303,  167,  302,  173,  173,  174,  167,  175,  301,  272,
      300,  299,  175,  272,  272,  272,  242,  242,  242,  273,
      298,  273,  297,  272,  274,  274,  274,  296,  168,  295,

      241,  294,  241,  293,  176,  242,  242,  242,  273,  292,
      273,  291,  290,  274,  274,  274,  274,  274,  274,   66,
       66,   66,   71,   71,   71,   76,   76,   76,   81,   81,
       81,  199,  289,  199,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  277,  276,  275,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  189,  190,  172,  164,  234,  233,
      232,  231,  230,  229,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,

      208,  207,  206,  205,  102,  196,  190,  191,  190,  190,
      190,  193,  190,  192,  191,  190,  189,  172,  164,  163,
      162,  161,  160,  159,  158,  153,  152,  151,  148,  137,
      133,  105,  124,  122,  107,  106,  105,  104,  103,  102,
      336,   13,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336
    } ;

static const flex_int16_t yy_chk[605] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    4,    4,    5,    5,  342,    5,
      341,    6,    6,    3,    6,    4,    7,    7,    3,   27,
        4,    8,    8,   28,    7,   32,   30,   38,   38,    8,
       32,   27,   43,   43,   28,   30,    5,   32,   50,  334,

       31,    6,   31,   31,   31,  333,    7,   36,   36,   36,
       50,    8,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   33,   45,   33,   33,   33,   46,
       48,   96,   96,   51,   45,   53,   48,   52,   46,  324,
       48,  322,   52,   52,   46,   51,   33,   55,   51,   53,

       55,   59,  321,   59,   74,   74,   74,  319,   74,   94,
       94,   94,   59,   74,   75,   75,  318,   75,  317,   59,
       79,   79,   79,  315,   79,   99,   99,  314,  114,   79,
      114,  114,  114,  152,  152,   74,  115,  115,  115,  119,
      313,  119,  119,  119,   75,  120,  246,  120,  120,  120,
      153,   79,   80,   80,  246,   80,  115,  121,  309,  121,
       80,  119,  121,  121,  121,  153,  307,  120,  306,   80,
       80,  305,  165,  165,  165,  304,  165,   80,  168,  168,
      302,  165,   80,  176,  176,   80,   80,  179,  179,  301,
       80,  180,  180,  237,  237,  197,   80,  197,  197,  197,

       80,  300,   80,  165,   80,  299,   80,  166,  166,  166,
      296,  166,  295,  173,  173,  173,  166,  173,  294,  174,
      174,  174,  173,  174,  293,  188,  292,  291,  174,  188,
      188,  188,  198,  198,  198,  201,  201,  201,  166,  188,
      204,  204,  204,  200,  173,  200,  200,  200,  290,  288,
      174,  202,  198,  202,  287,  201,  202,  202,  202,  203,
      286,  203,  285,  284,  203,  203,  203,  235,  235,  235,
      283,  235,  281,  236,  236,  236,  235,  236,  279,  239,
      278,  276,  236,  239,  239,  239,  242,  242,  242,  240,
      275,  240,  270,  239,  240,  240,  240,  269,  235,  268,

      241,  265,  241,  264,  236,  241,  241,  241,  273,  263,
      273,  262,  261,  273,  273,  273,  274,  274,  274,  337,
      337,  337,  338,  338,  338,  339,  339,  339,  340,  340,
      340,  343,  260,  343,  259,  258,  257,  255,  254,  253,
      251,  250,  248,  245,  244,  243,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  214,  213,  212,  211,  210,
      209,  208,  207,  205,  195,  193,  177,  169,  159,  158,
      157,  156,  155,  154,  151,  150,  149,  148,  147,  146,
      145,  144,  142,  141,  140,  139,  138,  136,  135,  134,

      133,  132,  131,  130,  127,  112,  100,   97,   95,   93,
       92,   91,   90,   89,   88,   86,   85,   78,   73,   70,
       69,   68,   63,   61,   60,   58,   57,   56,   54,   49,
       47,   40,   37,   34,   23,   22,   21,   20,   18,   17,
       13,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      336,  336,  336,  336,  336,  336,  336,  336,  336,  336,

      336,  336,  336,  336
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 1;

static const flex_int16_t yy_rule_linenum[124] =
    {   0,
      212,  213,  215,  221,  225,  226,  236,  237,  238,  239,
      243,  244,  254,  255,  256,  257,  258,  259,  260,  261,
      262,  263,  268,  273,  279,  285,  293,  296,  297,  298,
      299,  300,  301,  302,  303,  304,  305,  306,  307,  308,
      309,  311,  312,  313,  314,  315,  316,  317,  318,  319,
      320,  321,  322,  323,  324,  325,  326,  327,  328,  329,
      330,  331,  332,  333,  334,  335,  336,  337,  338,  340,
      341,  342,  343,  344,  345,  346,  348,  349,  350,  351,
      352,  354,  355,  356,  357,  358,  359,  360,  361,  362,
      363,  364,  365,  366,  367,  368,  369,  370,  371,  373,

      374,  375,  376,  377,  380,  387,  394,  396,  398,  400,
      402,  405,  407,  408,  414,  418,  422,  426,  429,  433,
      434,  435,  439
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "camp.l"
#line 2 "camp.l"
/*****
 * camp.l
 * Andy Hammerlindl 2002/06/14
 *
 * The lexical analyzer of the Asymptote language.
 *****/

#include <iostream>
#include <fstream>
#include <sstream>
#include <cstring>

#include "util.h"
#include "modifier.h"
#include "exp.h"
#include "stm.h"
#include "fundec.h"
#include "errormsg.h"
#include "interact.h"
#include "lexical.h"

using namespace absyntax;
using mem::string;

#include "camp.tab.h"

#include "opsymbols.h"

#define YY_NO_INPUT

static void yyunput(int, char *);
void (*unused)(int,char *) = yyunput;

fileinfo* fi;
Int tokPos;
Int charPos;
//int commentDepth = 0;

bool eof;
string eofMessage;

extern errorstream em;

extern "C" int yywrap(void)
{
  charPos=1;
  return 1;
}

typedef size_t (*input_f) (char* bif, size_t max_size);

input_f yy_input = NULL;

void setlexer(input_f input, string filename) 
{
  YY_FLUSH_BUFFER;
  yywrap();
  fi = new fileinfo(filename);
  yy_input = input;
  tokPos = charPos = 1;

  eof=false;
  eofMessage="<no eof>";
}

#define YY_INPUT(buf,result,max_size) {result=yy_input(buf,max_size);}

position lexerPos()
{
  position p;
  p.init(fi, tokPos);
  return p;
}
  
namespace {
position here()

{
  return lexerPos();
}

void adjust()
{
  tokPos = charPos;
  charPos += yyleng;
  yylval.pos = here();
} 

void savesymbol(symbol name)
{
  adjust();
  yylval.ps.pos=yylval.pos; // avoid invoking here() twice
  yylval.ps.sym=name;
}

/* For optimization reasons, the operator names are translated into symbols
 * just once, and can be accessed throughout the code as SYM_PLUS, SYM_DASHES,
 * etc.  Following the Don't Repeat Yourself principle, the mapping from
 * strings to names is defined only here in camp.l (because we can't produce
 * lex rules from a C style macro).
 * The script opsymbols.pl reads this file scanning for rules using DEFSYMBOL
 * and creates opsymbols.h which defines the names for use in C++ code.
 */
#define DEFSYMBOL(name) \
    savesymbol(name)

 /* Extra symbols can be added by EXTRASYMBOL */
#define EXTRASYMBOL(chars, codename) /* blank */

EXTRASYMBOL(tuple, SYM_TUPLE);

void makesymbol()
{
  assert(strlen(yytext) == (size_t)yyleng);
  savesymbol(symbol::rawTrans(yytext, yyleng+1));
}

void makeopsymbol()
{
  savesymbol(symbol::opTrans(yytext));
}

void makemod(trans::modifier mod) {
  yylval.mod.pos=here();
  yylval.mod.val=mod;
}

void makeperm(trans::permission perm) {
  yylval.perm.pos=here();
  yylval.perm.val=perm;
}

void newline()
{
  fi->newline();
  charPos = tokPos = 1;
}

void error(void)
{
  em.error(here());
}

}


// Used by the lexer rules to flag an unexpected end of input.  The message is
// the error message that should be reported, and may differ if, say the input
// ends in the middle of a string or comment.
void setEOF(string message) {
  eof=true;
  eofMessage=message;
}
  
// Called by code outside of the lexer to see if a parse error was caused by
// running out of input.
bool lexerEOF()
{
  return eof;
}

// Called by code outside of the lexer when it wants to report the unexpected
// eof as an error (instead of looking for more input).
void reportEOF() {
  assert(eof);
  error();
  em << eofMessage;
  em.sync();
}

position stringpos; // The position of the start of the string.
string stringbuild; // Stores the string literal as it is read.

namespace {
void startstring()
{
  adjust();
  stringpos = here();
}

void append(char c)
{
  stringbuild.push_back(c);
  yylval.pos = here();
}

void getstring(void)
{
  // NOTE: Replace here() with a position at the start of the string.
  yylval.stre = new stringExp(stringpos, stringbuild);
  string().swap(stringbuild);
}
}

#line 980 "lex.yy.cc"

#line 982 "lex.yy.cc"

#define INITIAL 0
#define lexcomment 1
#define texstring 2
#define cstring 3
#define lexformat 4
#define opname 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */

static int yy_init_globals ( void );

/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* %if-bison-bridge */
/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex (void);

#define YY_DECL int yylex (void)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
/* %% [7.0] user's declarations go here */
#line 209 "camp.l"


#line 1270 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 337 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 542 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 124 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 124 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 125 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 212 "camp.l"
{adjust(); /*commentDepth++;*/}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 213 "camp.l"
{adjust(); /*commentDepth--;*/
                    /*if (commentDepth == 0)*/ BEGIN INITIAL; }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 215 "camp.l"
{adjust(); newline(); continue; }
	YY_BREAK
case YY_STATE_EOF(lexcomment):
#line 216 "camp.l"
{adjust();
                    setEOF("comment not terminated");
                    BEGIN INITIAL;
                    return GARBAGE;
                   }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 221 "camp.l"
{adjust(); continue; }
	YY_BREAK


case 5:
/* rule 5 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 225 "camp.l"
{adjust(); BEGIN INITIAL;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 226 "camp.l"
{adjust(); 
                    BEGIN INITIAL;
                    getstring(); 
                    return STRING; }
	YY_BREAK
case YY_STATE_EOF(texstring):
#line 230 "camp.l"
{adjust();
                    setEOF("string not terminated");
                    BEGIN INITIAL;
                    getstring(); 
                    return GARBAGE;
                   }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 236 "camp.l"
{adjust(); newline(); append('\n'); continue; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 237 "camp.l"
{adjust(); append('\\'); append('\\'); continue; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 238 "camp.l"
{adjust(); append('\"'); continue; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 239 "camp.l"
{adjust(); append(*yytext); }
	YY_BREAK


case 11:
/* rule 11 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_bp + 1);
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 243 "camp.l"
{adjust(); BEGIN INITIAL;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 244 "camp.l"
{adjust(); 
                    BEGIN INITIAL;
                    getstring(); 
                    return STRING; }
	YY_BREAK
case YY_STATE_EOF(cstring):
#line 248 "camp.l"
{adjust();
                    setEOF("string not terminated");
                    BEGIN INITIAL;
                    getstring(); 
                    return GARBAGE;
                   }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 254 "camp.l"
{adjust(); newline(); append('\n'); continue; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 255 "camp.l"
{adjust(); append(yytext[1]); continue; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 256 "camp.l"
{adjust(); append('\a'); continue; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 257 "camp.l"
{adjust(); append('\b'); continue; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 258 "camp.l"
{adjust(); append('\f'); continue; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 259 "camp.l"
{adjust(); append('\n'); continue; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 260 "camp.l"
{adjust(); append('\r'); continue; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 261 "camp.l"
{adjust(); append('\t'); continue; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 262 "camp.l"
{adjust(); append('\v'); continue; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 263 "camp.l"
{adjust();
                    char x=(char)(yytext[1]-'0');
                    append(x);
                    continue;
                   } 
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 268 "camp.l"
{adjust();
                    char x=(char)((yytext[1]-'0')*8+yytext[2]-'0');
                    append(x);
                    continue;
                   } 
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 273 "camp.l"
{adjust();
                    char x=(char)((yytext[1]-'0')*64+(yytext[2]-'0')*8
                            +yytext[3]-'0');
                    append(x);
                    continue;
                   } 
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 279 "camp.l"
{adjust();
                    char x=(char) (yytext[2] <= '9' ? yytext[2]-'0' : 
                                                      10+yytext[2]-'A');
                    append(x);
                    continue;
                   } 
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 285 "camp.l"
{adjust();
                    char x=(char) ((yytext[2] <= '9' ? yytext[2]-'0' : 
                                                      10+yytext[2]-'A')*16
                                  +(yytext[3] <= '9' ? yytext[3]-'0' : 
                                                      10+yytext[3]-'A'));
                    append(x);
                    continue;
                   } 
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 293 "camp.l"
{adjust(); append(*yytext); }
	YY_BREAK

case 28:
YY_RULE_SETUP
#line 296 "camp.l"
{adjust(); continue;}
	YY_BREAK
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 297 "camp.l"
{adjust(); newline(); continue;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 298 "camp.l"
{adjust(); continue;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 299 "camp.l"
{adjust(); return ','; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 300 "camp.l"
{adjust(); return ':'; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 301 "camp.l"
{adjust(); return ';'; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 302 "camp.l"
{adjust(); return '('; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 303 "camp.l"
{adjust(); return ')'; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 304 "camp.l"
{adjust(); return '['; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 305 "camp.l"
{adjust(); return ']'; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 306 "camp.l"
{adjust(); return '{'; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 307 "camp.l"
{adjust(); return '}'; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 308 "camp.l"
{adjust(); return '.'; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 309 "camp.l"
{adjust(); return ELLIPSIS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 311 "camp.l"
{DEFSYMBOL(SYM_PLUS); return '+'; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 312 "camp.l"
{DEFSYMBOL(SYM_MINUS); return '-'; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 313 "camp.l"
{DEFSYMBOL(SYM_TIMES); return '*'; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 314 "camp.l"
{DEFSYMBOL(SYM_DIVIDE); return '/'; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 315 "camp.l"
{DEFSYMBOL(SYM_QUOTIENT); return '#'; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 316 "camp.l"
{DEFSYMBOL(SYM_MOD); return '%'; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 317 "camp.l"
{DEFSYMBOL(SYM_CARET); return '^'; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 318 "camp.l"
{savesymbol(SYM_CARET); return '^'; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 319 "camp.l"
{adjust(); return '?'; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 320 "camp.l"
{adjust(); return ASSIGN; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 321 "camp.l"
{DEFSYMBOL(SYM_EQ); return EQ; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 322 "camp.l"
{DEFSYMBOL(SYM_NEQ); return NEQ; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 323 "camp.l"
{DEFSYMBOL(SYM_LT); return LT; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 324 "camp.l"
{DEFSYMBOL(SYM_LE); return LE; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 325 "camp.l"
{DEFSYMBOL(SYM_GT); return GT; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 326 "camp.l"
{DEFSYMBOL(SYM_GE); return GE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 327 "camp.l"
{DEFSYMBOL(SYM_CAND); return CAND; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 328 "camp.l"
{DEFSYMBOL(SYM_COR); return COR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 329 "camp.l"
{DEFSYMBOL(SYM_LOGNOT); return OPERATOR; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 330 "camp.l"
{DEFSYMBOL(SYM_CARETS); return CARETS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 331 "camp.l"
{DEFSYMBOL(SYM_COLONS); return COLONS; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 332 "camp.l"
{DEFSYMBOL(SYM_INCR); return INCR; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 333 "camp.l"
{DEFSYMBOL(SYM_DOTS); return DOTS; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 334 "camp.l"
{DEFSYMBOL(SYM_DASHES); return DASHES; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 335 "camp.l"
{DEFSYMBOL(SYM_LONGDASH); return LONGDASH; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 336 "camp.l"
{DEFSYMBOL(SYM_AMPERSAND); return AMPERSAND; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 337 "camp.l"
{DEFSYMBOL(SYM_BAR); return BAR; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 338 "camp.l"
{makeopsymbol(); return OPERATOR; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 340 "camp.l"
{savesymbol(SYM_PLUS); return SELFOP; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 341 "camp.l"
{savesymbol(SYM_MINUS); return SELFOP; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 342 "camp.l"
{savesymbol(SYM_TIMES); return SELFOP; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 343 "camp.l"
{savesymbol(SYM_DIVIDE); return SELFOP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 344 "camp.l"
{savesymbol(SYM_QUOTIENT); return SELFOP; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 345 "camp.l"
{savesymbol(SYM_MOD); return SELFOP; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 346 "camp.l"
{savesymbol(SYM_CARET); return SELFOP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 348 "camp.l"
{adjust(); return AND; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 349 "camp.l"
{DEFSYMBOL(SYM_CONTROLS); return CONTROLS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 350 "camp.l"
{DEFSYMBOL(SYM_TENSION); return TENSION; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 351 "camp.l"
{DEFSYMBOL(SYM_ATLEAST); return ATLEAST; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 352 "camp.l"
{DEFSYMBOL(SYM_CURL); return CURL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 354 "camp.l"
{adjust(); return IF; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 355 "camp.l"
{adjust(); return ELSE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 356 "camp.l"
{adjust(); return WHILE; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 357 "camp.l"
{adjust(); return FOR; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 358 "camp.l"
{adjust(); return DO; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 359 "camp.l"
{adjust(); return RETURN_; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 360 "camp.l"
{adjust(); return BREAK; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 361 "camp.l"
{adjust(); return CONTINUE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 362 "camp.l"
{adjust(); return STRUCT; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 363 "camp.l"
{adjust(); return TYPEDEF; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 364 "camp.l"
{adjust(); return NEW; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 365 "camp.l"
{adjust(); return ACCESS; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 366 "camp.l"
{adjust(); return IMPORT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 367 "camp.l"
{adjust(); return UNRAVEL; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 368 "camp.l"
{adjust(); return FROM; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 369 "camp.l"
{adjust(); return INCLUDE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 370 "camp.l"
{adjust(); return QUOTE; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 371 "camp.l"
{adjust(); makemod(trans::EXPLICIT_STATIC);
                              return MODIFIER; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 373 "camp.l"
{adjust(); makeperm(trans::PUBLIC); return PERM; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 374 "camp.l"
{adjust(); makeperm(trans::PRIVATE); return PERM; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 375 "camp.l"
{adjust(); makeperm(trans::RESTRICTED); return PERM; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 376 "camp.l"
{adjust(); return THIS; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 377 "camp.l"
{adjust(); return EXPLICIT; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 380 "camp.l"
try {
  adjust(); yylval.e= new intExp(here(), lexical::cast<Int>(yytext)); 
  } catch (lexical::bad_cast&) {
    error();
    em << "invalid integer";
    yylval.e= new intExp(here(), 0); 
  } return LIT;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 387 "camp.l"
try {
  adjust(); yylval.e= new realExp(here(), lexical::cast<double>(yytext));
  } catch (lexical::bad_cast&) {
    error();
    em << "invalid real";
    yylval.e= new realExp(here(), 0); 
  } return LIT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 394 "camp.l"
{
  adjust(); yylval.e= new booleanExp(here(), true); return LIT; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 396 "camp.l"
{
  adjust(); yylval.e= new booleanExp(here(), false); return LIT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 398 "camp.l"
{
  adjust(); yylval.e= new nullExp(here()); return LIT; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 400 "camp.l"
{
  adjust(); yylval.e= new cycleExp(here()); return LIT; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 402 "camp.l"
{
  adjust(); yylval.e= new newPictureExp(here()); return LIT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 405 "camp.l"
{adjust(); BEGIN opname; }
	YY_BREAK

case 113:
YY_RULE_SETUP
#line 407 "camp.l"
{adjust(); continue;} 
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 408 "camp.l"
{adjust(); newline(); continue;}
	YY_BREAK
case YY_STATE_EOF(opname):
#line 409 "camp.l"
{adjust();
                    setEOF("missing operator name");
                    BEGIN INITIAL;
                    return GARBAGE;
                   }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 414 "camp.l"
{ savesymbol(SYM_CARET);
                     BEGIN INITIAL;
                     return ID;
                   }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 418 "camp.l"
{
  makeopsymbol();
  BEGIN INITIAL;
  return ID;}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 422 "camp.l"
{
  makeopsymbol();
  BEGIN INITIAL;
  return ID; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 426 "camp.l"
{}
	YY_BREAK

case 119:
YY_RULE_SETUP
#line 429 "camp.l"
{
  makesymbol();
  return ID; }  
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 433 "camp.l"
{adjust(); /*commentDepth = 1;*/ BEGIN lexcomment; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 434 "camp.l"
{startstring(); BEGIN texstring; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 435 "camp.l"
{startstring(); BEGIN cstring; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(lexformat):
#line 437 "camp.l"
{ setEOF("unexpected end of input"); yyterminate(); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 439 "camp.l"
{adjust();
                    error();
                    em << "invalid token";
                    if (isgraph(yytext[0]))
                      em << " '" << yytext[0] << "'";
                   }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 445 "camp.l"
ECHO;
	YY_BREAK
#line 2097 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 337 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 337 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 336);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

    static void yyunput (int c, char * yy_bp )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
void yypop_buffer_state (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (void)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/* %if-reentrant */
/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

/* %if-reentrant */
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 445 "camp.l"
